{"ast":null,"code":"import api from './api';\n\n/**\r\n * Service for product related API calls\r\n */\nconst ProductsService = {\n  /**\r\n   * Get list of products with optional filtering\r\n   * @param {Object} params - Query parameters for filtering\r\n   * @returns {Promise} - Promise with products data\r\n   */\n  getProducts: async (params = {}) => {\n    try {\n      const response = await api.get('/products/', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\r\n   * Get a single product by slug\r\n   * @param {string} slug - Product slug\r\n   * @returns {Promise} - Promise with product data\r\n   */\n  getProductBySlug: async slug => {\n    try {\n      const response = await api.get(`/products/${slug}/`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\r\n   * Get list of categories\r\n   * @returns {Promise} - Promise with categories data\r\n   */\n  getCategories: async () => {\n    try {\n      const response = await api.get('/categories/');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\r\n   * Get a single category by slug\r\n   * @param {string} slug - Category slug\r\n   * @returns {Promise} - Promise with category data\r\n   */\n  getCategoryBySlug: async slug => {\n    try {\n      const response = await api.get(`/categories/${slug}/`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\r\n   * Get list of platforms\r\n   * @returns {Promise} - Promise with platforms data\r\n   */\n  getPlatforms: async () => {\n    try {\n      const response = await api.get('/platforms/');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\r\n   * Get a single platform by slug\r\n   * @param {string} slug - Platform slug\r\n   * @returns {Promise} - Promise with platform data\r\n   */\n  getPlatformBySlug: async slug => {\n    try {\n      const response = await api.get(`/platforms/${slug}/`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\r\n   * Get featured products\r\n   * @returns {Promise} - Promise with featured products data\r\n   */\n  getFeaturedProducts: async () => {\n    try {\n      const response = await api.get('/products/featured/');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\r\n   * Get on sale products\r\n   * @returns {Promise} - Promise with on sale products data\r\n   */\n  getOnSaleProducts: async () => {\n    try {\n      const response = await api.get('/products/on_sale/');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\r\n   * Search products\r\n   * @param {string} query - Search query\r\n   * @returns {Promise} - Promise with search results\r\n   */\n  searchProducts: async query => {\n    try {\n      const response = await api.get('/products/', {\n        params: {\n          search: query\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\r\n   * Get products by category\r\n   * @param {string} categorySlug - Category slug\r\n   * @returns {Promise} - Promise with products in category\r\n   */\n  getProductsByCategory: async categorySlug => {\n    try {\n      const response = await api.get('/products/', {\n        params: {\n          category__slug: categorySlug\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\r\n   * Get products by platform\r\n   * @param {string} platformSlug - Platform slug\r\n   * @returns {Promise} - Promise with products for platform\r\n   */\n  getProductsByPlatform: async platformSlug => {\n    try {\n      const response = await api.get('/products/', {\n        params: {\n          platform__slug: platformSlug\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\nexport default ProductsService;","map":{"version":3,"names":["api","ProductsService","getProducts","params","response","get","data","error","getProductBySlug","slug","getCategories","getCategoryBySlug","getPlatforms","getPlatformBySlug","getFeaturedProducts","getOnSaleProducts","searchProducts","query","search","getProductsByCategory","categorySlug","category__slug","getProductsByPlatform","platformSlug","platform__slug"],"sources":["C:/Users/asifc/OneDrive/gamekeys/frontend/src/services/products.service.js"],"sourcesContent":["import api from './api';\r\n\r\n/**\r\n * Service for product related API calls\r\n */\r\nconst ProductsService = {\r\n  /**\r\n   * Get list of products with optional filtering\r\n   * @param {Object} params - Query parameters for filtering\r\n   * @returns {Promise} - Promise with products data\r\n   */\r\n  getProducts: async (params = {}) => {\r\n    try {\r\n      const response = await api.get('/products/', { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Get a single product by slug\r\n   * @param {string} slug - Product slug\r\n   * @returns {Promise} - Promise with product data\r\n   */\r\n  getProductBySlug: async (slug) => {\r\n    try {\r\n      const response = await api.get(`/products/${slug}/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Get list of categories\r\n   * @returns {Promise} - Promise with categories data\r\n   */\r\n  getCategories: async () => {\r\n    try {\r\n      const response = await api.get('/categories/');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Get a single category by slug\r\n   * @param {string} slug - Category slug\r\n   * @returns {Promise} - Promise with category data\r\n   */\r\n  getCategoryBySlug: async (slug) => {\r\n    try {\r\n      const response = await api.get(`/categories/${slug}/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Get list of platforms\r\n   * @returns {Promise} - Promise with platforms data\r\n   */\r\n  getPlatforms: async () => {\r\n    try {\r\n      const response = await api.get('/platforms/');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Get a single platform by slug\r\n   * @param {string} slug - Platform slug\r\n   * @returns {Promise} - Promise with platform data\r\n   */\r\n  getPlatformBySlug: async (slug) => {\r\n    try {\r\n      const response = await api.get(`/platforms/${slug}/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Get featured products\r\n   * @returns {Promise} - Promise with featured products data\r\n   */\r\n  getFeaturedProducts: async () => {\r\n    try {\r\n      const response = await api.get('/products/featured/');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Get on sale products\r\n   * @returns {Promise} - Promise with on sale products data\r\n   */\r\n  getOnSaleProducts: async () => {\r\n    try {\r\n      const response = await api.get('/products/on_sale/');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Search products\r\n   * @param {string} query - Search query\r\n   * @returns {Promise} - Promise with search results\r\n   */\r\n  searchProducts: async (query) => {\r\n    try {\r\n      const response = await api.get('/products/', { \r\n        params: { search: query } \r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Get products by category\r\n   * @param {string} categorySlug - Category slug\r\n   * @returns {Promise} - Promise with products in category\r\n   */\r\n  getProductsByCategory: async (categorySlug) => {\r\n    try {\r\n      const response = await api.get('/products/', { \r\n        params: { category__slug: categorySlug } \r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Get products by platform\r\n   * @param {string} platformSlug - Platform slug\r\n   * @returns {Promise} - Promise with products for platform\r\n   */\r\n  getProductsByPlatform: async (platformSlug) => {\r\n    try {\r\n      const response = await api.get('/products/', { \r\n        params: { platform__slug: platformSlug } \r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default ProductsService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}