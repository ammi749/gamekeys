{"ast":null,"code":"import api from './api';\n\n/**\r\n * Service for authentication related API calls\r\n */\nconst AuthService = {\n  /**\r\n   * Login with email and password\r\n   * @param {string} email - User email\r\n   * @param {string} password - User password\r\n   * @returns {Promise} - Promise with login response\r\n   */\n  login: async (email, password) => {\n    try {\n      const response = await api.post('/token/', {\n        email,\n        password\n      });\n      const {\n        access,\n        refresh\n      } = response.data;\n\n      // Store tokens in localStorage\n      localStorage.setItem('access_token', access);\n      localStorage.setItem('refresh_token', refresh);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\r\n   * Register a new user\r\n   * @param {Object} userData - User registration data\r\n   * @returns {Promise} - Promise with registration response\r\n   */\n  register: async userData => {\n    try {\n      const response = await api.post('/users/register/', userData);\n      const {\n        access,\n        refresh\n      } = response.data;\n\n      // Store tokens in localStorage\n      localStorage.setItem('access_token', access);\n      localStorage.setItem('refresh_token', refresh);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\r\n   * Logout the current user\r\n   */\n  logout: () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    // Clear any user state in your app if needed\n  },\n  /**\r\n   * Get current user profile\r\n   * @returns {Promise} - Promise with user data\r\n   */\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/users/me/');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\r\n   * Update user profile\r\n   * @param {Object} userData - Updated user data\r\n   * @returns {Promise} - Promise with updated user data\r\n   */\n  updateProfile: async userData => {\n    try {\n      const response = await api.put('/users/update_profile/', userData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\r\n   * Change user password\r\n   * @param {string} currentPassword - Current password\r\n   * @param {string} newPassword - New password\r\n   * @param {string} newPasswordConfirm - New password confirmation\r\n   * @returns {Promise} - Promise with response\r\n   */\n  changePassword: async (currentPassword, newPassword, newPasswordConfirm) => {\n    try {\n      const response = await api.post('/users/change_password/', {\n        current_password: currentPassword,\n        new_password: newPassword,\n        new_password_confirm: newPasswordConfirm\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\r\n   * Check if the user is authenticated\r\n   * @returns {boolean} - True if the user is authenticated\r\n   */\n  isAuthenticated: () => {\n    // Check if the access token exists\n    // For better security, you could also check token expiration\n    return !!localStorage.getItem('access_token');\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["api","AuthService","login","email","password","response","post","access","refresh","data","localStorage","setItem","error","register","userData","logout","removeItem","getCurrentUser","get","updateProfile","put","changePassword","currentPassword","newPassword","newPasswordConfirm","current_password","new_password","new_password_confirm","isAuthenticated","getItem"],"sources":["C:/Users/asifc/OneDrive/gamekeys/frontend/src/services/auth.service.js"],"sourcesContent":["import api from './api';\r\n\r\n/**\r\n * Service for authentication related API calls\r\n */\r\nconst AuthService = {\r\n  /**\r\n   * Login with email and password\r\n   * @param {string} email - User email\r\n   * @param {string} password - User password\r\n   * @returns {Promise} - Promise with login response\r\n   */\r\n  login: async (email, password) => {\r\n    try {\r\n      const response = await api.post('/token/', { email, password });\r\n      const { access, refresh } = response.data;\r\n      \r\n      // Store tokens in localStorage\r\n      localStorage.setItem('access_token', access);\r\n      localStorage.setItem('refresh_token', refresh);\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Register a new user\r\n   * @param {Object} userData - User registration data\r\n   * @returns {Promise} - Promise with registration response\r\n   */\r\n  register: async (userData) => {\r\n    try {\r\n      const response = await api.post('/users/register/', userData);\r\n      const { access, refresh } = response.data;\r\n      \r\n      // Store tokens in localStorage\r\n      localStorage.setItem('access_token', access);\r\n      localStorage.setItem('refresh_token', refresh);\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Logout the current user\r\n   */\r\n  logout: () => {\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('refresh_token');\r\n    // Clear any user state in your app if needed\r\n  },\r\n  \r\n  /**\r\n   * Get current user profile\r\n   * @returns {Promise} - Promise with user data\r\n   */\r\n  getCurrentUser: async () => {\r\n    try {\r\n      const response = await api.get('/users/me/');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Update user profile\r\n   * @param {Object} userData - Updated user data\r\n   * @returns {Promise} - Promise with updated user data\r\n   */\r\n  updateProfile: async (userData) => {\r\n    try {\r\n      const response = await api.put('/users/update_profile/', userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Change user password\r\n   * @param {string} currentPassword - Current password\r\n   * @param {string} newPassword - New password\r\n   * @param {string} newPasswordConfirm - New password confirmation\r\n   * @returns {Promise} - Promise with response\r\n   */\r\n  changePassword: async (currentPassword, newPassword, newPasswordConfirm) => {\r\n    try {\r\n      const response = await api.post('/users/change_password/', {\r\n        current_password: currentPassword,\r\n        new_password: newPassword,\r\n        new_password_confirm: newPasswordConfirm\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Check if the user is authenticated\r\n   * @returns {boolean} - True if the user is authenticated\r\n   */\r\n  isAuthenticated: () => {\r\n    // Check if the access token exists\r\n    // For better security, you could also check token expiration\r\n    return !!localStorage.getItem('access_token');\r\n  }\r\n};\r\n\r\nexport default AuthService;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA;AACA;AACA,MAAMC,WAAW,GAAG;EAClB;AACF;AACA;AACA;AACA;AACA;EACEC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,SAAS,EAAE;QAAEH,KAAK;QAAEC;MAAS,CAAC,CAAC;MAC/D,MAAM;QAAEG,MAAM;QAAEC;MAAQ,CAAC,GAAGH,QAAQ,CAACI,IAAI;;MAEzC;MACAC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEJ,MAAM,CAAC;MAC5CG,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEH,OAAO,CAAC;MAE9C,OAAOH,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,kBAAkB,EAAEQ,QAAQ,CAAC;MAC7D,MAAM;QAAEP,MAAM;QAAEC;MAAQ,CAAC,GAAGH,QAAQ,CAACI,IAAI;;MAEzC;MACAC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEJ,MAAM,CAAC;MAC5CG,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEH,OAAO,CAAC;MAE9C,OAAOH,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;EACEG,MAAM,EAAEA,CAAA,KAAM;IACZL,YAAY,CAACM,UAAU,CAAC,cAAc,CAAC;IACvCN,YAAY,CAACM,UAAU,CAAC,eAAe,CAAC;IACxC;EACF,CAAC;EAED;AACF;AACA;AACA;EACEC,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAML,GAAG,CAACkB,GAAG,CAAC,YAAY,CAAC;MAC5C,OAAOb,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEO,aAAa,EAAE,MAAOL,QAAQ,IAAK;IACjC,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAML,GAAG,CAACoB,GAAG,CAAC,wBAAwB,EAAEN,QAAQ,CAAC;MAClE,OAAOT,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACES,cAAc,EAAE,MAAAA,CAAOC,eAAe,EAAEC,WAAW,EAAEC,kBAAkB,KAAK;IAC1E,IAAI;MACF,MAAMnB,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,yBAAyB,EAAE;QACzDmB,gBAAgB,EAAEH,eAAe;QACjCI,YAAY,EAAEH,WAAW;QACzBI,oBAAoB,EAAEH;MACxB,CAAC,CAAC;MACF,OAAOnB,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;EACEgB,eAAe,EAAEA,CAAA,KAAM;IACrB;IACA;IACA,OAAO,CAAC,CAAClB,YAAY,CAACmB,OAAO,CAAC,cAAc,CAAC;EAC/C;AACF,CAAC;AAED,eAAe5B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}