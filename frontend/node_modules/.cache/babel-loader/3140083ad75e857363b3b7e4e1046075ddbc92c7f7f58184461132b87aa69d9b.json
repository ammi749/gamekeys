{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asifc\\\\OneDrive\\\\gamekeys\\\\frontend\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const useCart = () => {\n  _s();\n  return useContext(CartContext);\n};\n_s(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  // Initialize cart from localStorage or empty array\n  const [cartItems, setCartItems] = useState(() => {\n    const savedCart = localStorage.getItem('cart');\n    return savedCart ? JSON.parse(savedCart) : [];\n  });\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(cartItems));\n  }, [cartItems]);\n\n  /**\r\n   * Add a product to the cart\r\n   * @param {Object} product - Product to add\r\n   * @param {number} quantity - Quantity to add (default 1)\r\n   */\n  const addToCart = (product, quantity = 1) => {\n    setCartItems(prevItems => {\n      // Check if item already exists in cart\n      const existingItemIndex = prevItems.findIndex(item => item.id === product.id);\n      if (existingItemIndex >= 0) {\n        // Update quantity of existing item\n        const updatedItems = [...prevItems];\n        updatedItems[existingItemIndex] = {\n          ...updatedItems[existingItemIndex],\n          quantity: updatedItems[existingItemIndex].quantity + quantity\n        };\n        return updatedItems;\n      } else {\n        // Add new item\n        return [...prevItems, {\n          ...product,\n          quantity\n        }];\n      }\n    });\n  };\n\n  /**\r\n   * Remove a product from the cart\r\n   * @param {number} productId - ID of product to remove\r\n   */\n  const removeFromCart = productId => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== productId));\n  };\n\n  /**\r\n   * Update the quantity of a product in the cart\r\n   * @param {number} productId - ID of product to update\r\n   * @param {number} quantity - New quantity\r\n   */\n  const updateQuantity = (productId, quantity) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n    setCartItems(prevItems => prevItems.map(item => item.id === productId ? {\n      ...item,\n      quantity\n    } : item));\n  };\n\n  /**\r\n   * Clear all items from the cart\r\n   */\n  const clearCart = () => {\n    setCartItems([]);\n  };\n\n  /**\r\n   * Calculate total number of items in cart\r\n   * @returns {number} - Total quantity\r\n   */\n  const getCartCount = () => {\n    return cartItems.reduce((total, item) => total + item.quantity, 0);\n  };\n\n  /**\r\n   * Calculate subtotal of all items in cart\r\n   * @returns {number} - Subtotal price\r\n   */\n  const getSubtotal = () => {\n    return cartItems.reduce((total, item) => {\n      const price = item.sale_price || item.price;\n      return total + price * item.quantity;\n    }, 0);\n  };\n\n  /**\r\n   * Format cart items for order submission\r\n   * @returns {Array} - Formatted cart items for API\r\n   */\n  const getOrderItems = () => {\n    return cartItems.map(item => ({\n      product_id: item.id,\n      quantity: item.quantity\n    }));\n  };\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    getCartCount,\n    getSubtotal,\n    getOrderItems,\n    isEmpty: cartItems.length === 0\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s2(CartProvider, \"G/OXTrPvVnA1RXjOTXlXGjsW7j4=\");\n_c = CartProvider;\nexport default CartContext;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","jsxDEV","_jsxDEV","CartContext","useCart","_s","CartProvider","children","_s2","cartItems","setCartItems","savedCart","localStorage","getItem","JSON","parse","setItem","stringify","addToCart","product","quantity","prevItems","existingItemIndex","findIndex","item","id","updatedItems","removeFromCart","productId","filter","updateQuantity","map","clearCart","getCartCount","reduce","total","getSubtotal","price","sale_price","getOrderItems","product_id","value","isEmpty","length","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/asifc/OneDrive/gamekeys/frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\n\r\n// Create context\r\nconst CartContext = createContext();\r\n\r\nexport const useCart = () => useContext(CartContext);\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  // Initialize cart from localStorage or empty array\r\n  const [cartItems, setCartItems] = useState(() => {\r\n    const savedCart = localStorage.getItem('cart');\r\n    return savedCart ? JSON.parse(savedCart) : [];\r\n  });\r\n  \r\n  // Save cart to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('cart', JSON.stringify(cartItems));\r\n  }, [cartItems]);\r\n  \r\n  /**\r\n   * Add a product to the cart\r\n   * @param {Object} product - Product to add\r\n   * @param {number} quantity - Quantity to add (default 1)\r\n   */\r\n  const addToCart = (product, quantity = 1) => {\r\n    setCartItems(prevItems => {\r\n      // Check if item already exists in cart\r\n      const existingItemIndex = prevItems.findIndex(\r\n        item => item.id === product.id\r\n      );\r\n      \r\n      if (existingItemIndex >= 0) {\r\n        // Update quantity of existing item\r\n        const updatedItems = [...prevItems];\r\n        updatedItems[existingItemIndex] = {\r\n          ...updatedItems[existingItemIndex],\r\n          quantity: updatedItems[existingItemIndex].quantity + quantity\r\n        };\r\n        return updatedItems;\r\n      } else {\r\n        // Add new item\r\n        return [...prevItems, { ...product, quantity }];\r\n      }\r\n    });\r\n  };\r\n  \r\n  /**\r\n   * Remove a product from the cart\r\n   * @param {number} productId - ID of product to remove\r\n   */\r\n  const removeFromCart = (productId) => {\r\n    setCartItems(prevItems => \r\n      prevItems.filter(item => item.id !== productId)\r\n    );\r\n  };\r\n  \r\n  /**\r\n   * Update the quantity of a product in the cart\r\n   * @param {number} productId - ID of product to update\r\n   * @param {number} quantity - New quantity\r\n   */\r\n  const updateQuantity = (productId, quantity) => {\r\n    if (quantity <= 0) {\r\n      removeFromCart(productId);\r\n      return;\r\n    }\r\n    \r\n    setCartItems(prevItems =>\r\n      prevItems.map(item =>\r\n        item.id === productId\r\n          ? { ...item, quantity }\r\n          : item\r\n      )\r\n    );\r\n  };\r\n  \r\n  /**\r\n   * Clear all items from the cart\r\n   */\r\n  const clearCart = () => {\r\n    setCartItems([]);\r\n  };\r\n  \r\n  /**\r\n   * Calculate total number of items in cart\r\n   * @returns {number} - Total quantity\r\n   */\r\n  const getCartCount = () => {\r\n    return cartItems.reduce((total, item) => total + item.quantity, 0);\r\n  };\r\n  \r\n  /**\r\n   * Calculate subtotal of all items in cart\r\n   * @returns {number} - Subtotal price\r\n   */\r\n  const getSubtotal = () => {\r\n    return cartItems.reduce((total, item) => {\r\n      const price = item.sale_price || item.price;\r\n      return total + (price * item.quantity);\r\n    }, 0);\r\n  };\r\n  \r\n  /**\r\n   * Format cart items for order submission\r\n   * @returns {Array} - Formatted cart items for API\r\n   */\r\n  const getOrderItems = () => {\r\n    return cartItems.map(item => ({\r\n      product_id: item.id,\r\n      quantity: item.quantity\r\n    }));\r\n  };\r\n  \r\n  const value = {\r\n    cartItems,\r\n    addToCart,\r\n    removeFromCart,\r\n    updateQuantity,\r\n    clearCart,\r\n    getCartCount,\r\n    getSubtotal,\r\n    getOrderItems,\r\n    isEmpty: cartItems.length === 0\r\n  };\r\n  \r\n  return (\r\n    <CartContext.Provider value={value}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}